apply plugin: 'com.android.application'

//keystore stuff
def versionPropsFile = file('keystore_credentials.properties')
def store_password = "android"
def key_alias = "androiddebugkey"
def key_password = "android"

if (versionPropsFile.canRead()) {
    versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    store_password = versionProps['STORE_PASSWORD'].toString()
    key_alias = versionProps['KEY_ALIAS'].toString()
    key_password = versionProps['KEY_PASSWORD'].toString()
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode 1
        versionName '1.0'
        testPackageName "com.delectable.mobile.tests"
        testApplicationId 'com.delectable.mobile.tests'
        // API Keys (same for both release and debug)
        buildConfigField 'String', 'KAHUNA_SECRET', '"fffde0bdadbd44c9b3ae78e5ca2d981e"'
        buildConfigField 'String', 'KAHUNA_PUSH_ID', '"1011661250607"'
        buildConfigField "boolean", "REPORT_CRASHES", "false"

    }

    signingConfigs {
        debug {
            storeFile file("../app/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        //TODO: Add Real Release Keystore with PW, or use an environment variable for PW
        release {
            storeFile file("../app/release_keystore.jks")
            storePassword store_password
            keyAlias key_alias
            keyPassword key_password
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        beta {
            versionNameSuffix "-beta-" + getDate()
            debuggable true
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        release {
            buildConfigField "boolean", "REPORT_CRASHES", "true"
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://raw.githubusercontent.com/iainconnor/ObjectCache/master/maven/' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile 'junit:junit:4.10@jar'
    compile 'com.android.support:support-v13:19.1'
    compile 'com.loopj.android:android-async-http:1.4.4@jar'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.apache.commons:commons-lang3:3.1@jar'
    compile 'com.squareup.picasso:picasso:2.3.3'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okio:okio:1.0.0'
    compile 'org.ocpsoft.prettytime:prettytime:3.0.2.Final@jar'
    compile project(':facebook')
    compile project(':viewPagerIndicator')
    compile 'com.jakewharton:butterknife:5.1.1'
    //need to keep dagger at 1.1.0 (at least until dagger 2.0 comes out, bc proguard doesn't work with 1.2.2)
    compile 'com.squareup.dagger:dagger:1.1.0'
    compile 'com.squareup.dagger:dagger-compiler:1.1.0'
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile 'com.iainconnor:objectcache:0.0.18-SNAPSHOT@aar'
    compile 'de.greenrobot:eventbus:2.2.1'
    compile 'com.path:android-priority-jobqueue:1.1.2'
    compile 'com.google.android.gms:play-services:5.2.08'
    compile files('libs/kahuna_473.jar')
}




def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}