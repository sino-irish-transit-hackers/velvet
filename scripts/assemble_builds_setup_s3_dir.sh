#!/bin/sh
#
# jenkins script to get files ready for s3 upload. Assembles builds and copies apk, html and version.properties file into local S3 folder.
#
set -e # stop if command returns non zero
echo "assembling apk for S3"

if [[ ${GIT_BRANCH} == *release* ]]
then
	#GIT_BRANCH will look like this: remotes/origin/release/1.1
	#if a release branch, label it release and not something like 1.1
	GIT_BRANCH_NO_PATH="release"
	RELEASE=true
else
	#GIT_BRANCH will look like this: remotes/origin/master
	#just label after the branch because we're not using namespaces
	GIT_BRANCH_NO_PATH=$(echo ${GIT_BRANCH} | sed -e 's,.*/\(.*\),\1,')
fi

echo "branch: $GIT_BRANCH_NO_PATH"


GRADLE_BUILD_FILE_PATH="${WORKSPACE}/Delectable/app/build.gradle"
echo "build.gradle path: $GRADLE_BUILD_FILE_PATH"

GIT_COMMIT_SHORT=${GIT_COMMIT:0:7}
echo "commit: $GIT_COMMIT_SHORT"

VERSION_NAME=`grep "versionName" "$GRADLE_BUILD_FILE_PATH" | sed -e "s,.*'\(.*\)',\1,"`
VERSION_NAME_WITH_EXTRAS="${VERSION_NAME} - #${BUILD_NUMBER} (${GIT_COMMIT_SHORT})"
echo "version: $VERSION_NAME_WITH_EXTRAS"

DELECTABLE_PROJECT_PATH="${WORKSPACE}/Delectable"
echo $DELECTABLE_PROJECT_PATH
cd ${DELECTABLE_PROJECT_PATH}


#make S3 directory for upload
S3_UPLOAD_DIR=${WORKSPACE}/BuildsForS3
mkdir -p "${S3_UPLOAD_DIR}"

prepareForS3() {
	BUILD_NAME=$1
	BRANCH=${GIT_BRANCH_NO_PATH}
	echo apk: ${BUILD_NAME} 
	echo branch: ${BRANCH}
	APK_NAME=${BRANCH}-${BUILD_NAME}

	#copy apk to S3 folder for upload
	cp "${WORKSPACE}/Delectable/app/build/outputs/apk/app-${BUILD_NAME}.apk" "${S3_UPLOAD_DIR}/${APK_NAME}.apk"

	#copy version.properties file (generated by gradle build script with build date)
	#uncomment this if we decide to do an alpha build with an update dialog again
	#cp "${WORKSPACE}/Delectable/app/version.properties" "${ENTERPRISE_PRODUCT_DIRECTORY}/version.properties"

	# copy html template
	DOWNLOAD_LANDING_HTML=${S3_UPLOAD_DIR}/${APK_NAME}.html
	cp "${WORKSPACE}/scripts/android_download.html" "${DOWNLOAD_LANDING_HTML}"

	#inject values into html template
	sed -i "" "s@RELEASE_NAME@${APK_NAME}@g" "${DOWNLOAD_LANDING_HTML}"

	sed -i "" "s@DOWNLOAD_URL@https://s3.amazonaws.com/fermentationtank/android/${APK_NAME}.apk@g" "${DOWNLOAD_LANDING_HTML}"

	sed -i "" "s@VERSION_NAME@Version: ${VERSION_NAME}@g" "${DOWNLOAD_LANDING_HTML}"
	sed -i "" "s@BUILD_NUM@Build #${BUILD_NUMBER}@g" "${DOWNLOAD_LANDING_HTML}"
	sed -i "" "s@COMMIT_HASH@Commit: ${GIT_COMMIT_SHORT}@g" "${DOWNLOAD_LANDING_HTML}"
	sed -i "" "s@LAST_UPDATED@last updated ${BUILD_ID}@g" "${DOWNLOAD_LANDING_HTML}"
}

export GRADLE_OPTS=-Xmx2048m
 ./gradlew clean

if [[ ${GIT_BRANCH_NO_PATH} == release ]];
then
	echo "assembling builds from release branch"
	./gradlew assembleStagingPrerelease
	./gradlew assembleStagingRelease
	./gradlew assemblePickablePrerelease
	./gradlew assemblePickableRelease
	prepareForS3 staging-prerelease
	prepareForS3 staging-release
	prepareForS3 pickable-prerelease
	prepareForS3 pickable-release
fi

if [[ ${GIT_BRANCH_NO_PATH} == master ]];
then	
	echo "assembling builds from master branch"
	./gradlew assembleVanillaDebug
	./gradlew assembleVanillaRelease
	prepareForS3 vanilla-debug
	prepareForS3 vanilla-release
fi

if [[ ${GIT_BRANCH_NO_PATH} == develop ]];
then
	echo "assembling builds from develop branch"

	#only do this for develop branch builds, so that QA can tell us a number
	#string replace version name in build.gradle
	#ie: versionName '1.1' > versionName '1.1 - rev.10 (5cd6e4)'
	sed -i "" "s@\(versionName.*\)'.*'@\1'${VERSION_NAME_WITH_EXTRAS}'@g" "${GRADLE_BUILD_FILE_PATH}"

	./gradlew assembleVanillaDebug
	./gradlew assembleVanillaRelease

	#revert versionName string back to original
	sed -i "" "s@\(versionName.*\)'.*'@\1'${VERSION_NAME}'@g" "${GRADLE_BUILD_FILE_PATH}"

	prepareForS3 vanilla-debug
	prepareForS3 vanilla-release
fi

